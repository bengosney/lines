{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","pixelSize","height","width","openSimplex","OpenSimplexNoise","Date","now","phase","drawing","ctx","updateWindowDimensions","bind","assertThisInitialized","startts","getTS","_this2","canvas","refs","getContext","rAF","requestAnimationFrame","updateAnimationState","window","addEventListener","_window","innerWidth","innerHeight","setState","cancelAnimationFrame","removeEventListener","ts","clearFrame","i","drawCircle","nextFrame","_this3","_this$state","fillStyle","fillRect","min","max","Math","floor","random","x","y","noise2D","getTime","value","r1","r2","n","count","_this$state2","TWO_PI","PI","maxR","minR","m","p","beginPath","strokeStyle","concat","scaled","a","noiseX","scale","cos","noiseY","sin","r","randomXY","lineTo","closePath","stroke","_this4","_this$state3","react_default","createElement","ref","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0bf4a5d8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport OpenSimplexNoise from 'open-simplex-noise';\n\n\nclass App extends Component {\n    constructor(props) {\n\tsuper(props);\n\n\tthis.state = {\n\t    pixelSize: 8,\n\t    height: 500,\n\t    width: 150,\n\t    openSimplex: new OpenSimplexNoise(Date.now()),\n\t    phase: 0\n\t};\n\t\n\tthis.drawing = false;\n\tthis.ctx = null;\n\n\n\tthis.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n\tthis.startts = this.getTS();\n    }\n\n    \n    componentDidMount() {\n\tconst canvas = this.refs.canvas;\n\tthis.ctx = canvas.getContext(\"2d\");\n\n\t\n\tthis.rAF = requestAnimationFrame(() => this.updateAnimationState());\n\tthis.updateWindowDimensions();\n\twindow.addEventListener('resize', this.updateWindowDimensions);\n    }\n    \n    updateWindowDimensions() {\n\tconst { innerWidth, innerHeight } = window;\n\t\n\tthis.setState({ width: innerWidth, height: innerHeight });\n    }\n    \n    componentWillUnmount() {\n\tcancelAnimationFrame(this.rAF);\n\twindow.removeEventListener('resize', this.updateWindowDimensions);\n    }\n\n    updateAnimationState() {\n\tthis.ts = this.getTS();\n\tthis.clearFrame();\n\n\tconst count = 10;\n\t\n\tfor (let i = 0 ; i < count ; i++) { \n\t    this.drawCircle(i, count);\n\t}\n\t\t\n\tthis.nextFrame();\n    }\n\n    nextFrame() {\n\t//this.setState({ phase: this.state.phase + 0.01 });\n\tthis.rAF = requestAnimationFrame(() => this.updateAnimationState());\n    }\n\n    clearFrame() {\n\tconst { width, height } = this.state;\n\tconst { ctx } = this;\n\n\tctx.fillStyle = \"#000000\";\n\tctx.fillRect(0, 0, width, height);\n    }\n\n    random(min, max) {\n\treturn Math.floor(Math.random()*(max-min+1)+min);\n    }\n\n    randomXY(min, max, x, y) {\n\tconst { openSimplex } = this.state;\n\tconst random = openSimplex.noise2D(x, y);\n\n\treturn Math.floor(random*(max-min+1)+min);\n    }\n\n    getTS() {\n\tconst date = new Date();\n\t\n\treturn date.getTime();\n    }\n\n    scale( value, r1, r2 ) { \n\treturn ( value - r1[ 0 ] ) * ( r2[ 1 ] - r2[ 0 ] ) / ( r1[ 1 ] - r1[ 0 ] ) + r2[ 0 ];\n    }\n    \n    drawCircle(n, count) {\n\tconst { ctx } = this;\n\tconst { width, height, phase } = this.state;\n\tconst TWO_PI = Math.PI * 2;\n\tconst maxR = Math.min(width, height) / 3;\n\tconst minR = maxR / 1.1;\n\tconst m = maxR * 1.1;\n\tconst step = 0.01;\n\n\tconst p = phase;\n\t\n\tctx.beginPath();\n\tconst colour = 255;\n\tctx.strokeStyle = `rgba(${colour}, ${colour}, ${colour}, .8)`;\n\n\tconst scaled = [0, n];\n\t\n\tfor (let a = 0 ; a <= TWO_PI; a += step) {\n\t    const noiseX = this.scale(Math.cos(a + p), [-1, 1], scaled);\n\t    const noiseY = this.scale(Math.sin(a + p), [-1, 1], scaled);\n\t    \n\t    const r = this.randomXY(minR, maxR, noiseX, noiseY);\n\t    \n\t    const x = r * Math.sin(a) + m;\n\t    const y = r * Math.cos(a) + m;\t   \n\t    \n\t    ctx.lineTo(x, y);\n\t}\n\n\tctx.closePath();\n\tctx.stroke();\n    }\n    \n    render() {\n\tconst { width, height } = this.state;\n\n        return (\n\t    <div>\n              <div>\n\t\t<canvas ref=\"canvas\" width={ width } height={ height } onClick={ () => this.setState({ openSimplex: new OpenSimplexNoise(Date.now()) }) } />\n              </div>\n            </div>\n\t);\t\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}